/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module adder_6 (
    input clk,
    input rst,
    input clkrise,
    input in,
    input [1:0] result,
    output reg [7:0] out,
    output reg [6:0] io
  );
  
  
  
  localparam ERROR_state = 4'd0;
  localparam CASE1_state = 4'd1;
  localparam CASE2_state = 4'd2;
  localparam CASE3_state = 4'd3;
  localparam CASE4_state = 4'd4;
  localparam CASE5_state = 4'd5;
  localparam CASE6_state = 4'd6;
  localparam CASE7_state = 4'd7;
  localparam CASE8_state = 4'd8;
  localparam SUCCESS_state = 4'd9;
  
  reg [3:0] M_state_d, M_state_q = CASE1_state;
  
  always @* begin
    M_state_d = M_state_q;
    
    M_state_d = M_state_q;
    out = 8'h00;
    io = 7'h00;
    
    case (M_state_q)
      ERROR_state: begin
        out = 8'ha8;
        io = 7'h49;
      end
      SUCCESS_state: begin
        out = 8'hff;
        io = 7'h36;
        if (in == 1'h1) begin
          M_state_d = CASE1_state;
        end
      end
      CASE1_state: begin
        out = 8'h00;
        io = 7'h06;
        if (clkrise == 1'h1 && result == 2'h0) begin
          M_state_d = CASE2_state;
        end
        if (clkrise == 1'h1 && result != 2'h0) begin
          M_state_d = ERROR_state;
        end
      end
      CASE2_state: begin
        out = 8'h01;
        io = 7'h5b;
        if (clkrise == 1'h1 && result == 2'h1) begin
          M_state_d = CASE3_state;
        end
        if (clkrise == 1'h1 && result != 2'h1) begin
          M_state_d = ERROR_state;
        end
      end
      CASE3_state: begin
        out = 8'h02;
        io = 7'h4f;
        if (clkrise == 1'h1 && result == 2'h1) begin
          M_state_d = CASE4_state;
        end
        if (clkrise == 1'h1 && result != 2'h1) begin
          M_state_d = ERROR_state;
        end
      end
      CASE4_state: begin
        out = 8'h03;
        io = 7'h66;
        if (clkrise == 1'h1 && result == 2'h2) begin
          M_state_d = CASE5_state;
        end
        if (clkrise == 1'h1 && result != 2'h2) begin
          M_state_d = ERROR_state;
        end
      end
      CASE5_state: begin
        out = 8'h04;
        io = 7'h6d;
        if (clkrise == 1'h1 && result == 2'h1) begin
          M_state_d = CASE6_state;
        end
        if (clkrise == 1'h1 && result != 2'h1) begin
          M_state_d = ERROR_state;
        end
      end
      CASE6_state: begin
        out = 8'h05;
        io = 7'h7d;
        if (clkrise == 1'h1 && result == 2'h2) begin
          M_state_d = CASE7_state;
        end
        if (clkrise == 1'h1 && result != 2'h2) begin
          M_state_d = ERROR_state;
        end
      end
      CASE7_state: begin
        out = 8'h06;
        io = 7'h07;
        if (clkrise == 1'h1 && result == 2'h2) begin
          M_state_d = CASE8_state;
        end
        if (clkrise == 1'h1 && result != 2'h2) begin
          M_state_d = ERROR_state;
        end
      end
      CASE8_state: begin
        out = 8'h07;
        io = 7'h7f;
        if (clkrise == 1'h1 && result == 2'h3) begin
          M_state_d = SUCCESS_state;
        end
        if (clkrise == 1'h1 && result != 2'h3) begin
          M_state_d = ERROR_state;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_state_q <= 1'h1;
    end else begin
      M_state_q <= M_state_d;
    end
  end
  
endmodule
